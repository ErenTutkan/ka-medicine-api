/**
 * Kolay Asistan Medicine API
 * Kolay Asistan medicine application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Medicine model module.
 * @module model/Medicine
 * @version 0.0.1
 */
class Medicine {
    /**
     * Constructs a new <code>Medicine</code>.
     * @alias module:model/Medicine
     * @param id {Number} 
     * @param barcode {String} 
     * @param name {String} 
     * @param ingredientName {String} 
     * @param usePeriod {Number} 
     * @param useWith {Number} 
     * @param usePiece {Number} 
     * @param dayPeriod {Number} 
     * @param intervalPeriod {String} 
     * @param isActive {Boolean} 
     * @param categoryId {Number} 
     * @param recipeType {String} 
     * @param atcCode {String} 
     * @param atcName {String} 
     */
    constructor(id, barcode, name, ingredientName, usePeriod, useWith, usePiece, dayPeriod, intervalPeriod, isActive, categoryId, recipeType, atcCode, atcName) { 
        
        Medicine.initialize(this, id, barcode, name, ingredientName, usePeriod, useWith, usePiece, dayPeriod, intervalPeriod, isActive, categoryId, recipeType, atcCode, atcName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, barcode, name, ingredientName, usePeriod, useWith, usePiece, dayPeriod, intervalPeriod, isActive, categoryId, recipeType, atcCode, atcName) { 
        obj['id'] = id;
        obj['barcode'] = barcode;
        obj['name'] = name;
        obj['ingredient_name'] = ingredientName;
        obj['use_period'] = usePeriod;
        obj['use_with'] = useWith;
        obj['use_piece'] = usePiece;
        obj['day_period'] = dayPeriod;
        obj['interval_period'] = intervalPeriod;
        obj['is_active'] = isActive;
        obj['category_id'] = categoryId;
        obj['recipe_type'] = recipeType;
        obj['atc_code'] = atcCode;
        obj['atc_name'] = atcName;
    }

    /**
     * Constructs a <code>Medicine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Medicine} obj Optional instance to populate.
     * @return {module:model/Medicine} The populated <code>Medicine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Medicine();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ingredient_name')) {
                obj['ingredient_name'] = ApiClient.convertToType(data['ingredient_name'], 'String');
            }
            if (data.hasOwnProperty('use_period')) {
                obj['use_period'] = ApiClient.convertToType(data['use_period'], 'Number');
            }
            if (data.hasOwnProperty('use_with')) {
                obj['use_with'] = ApiClient.convertToType(data['use_with'], 'Number');
            }
            if (data.hasOwnProperty('use_piece')) {
                obj['use_piece'] = ApiClient.convertToType(data['use_piece'], 'Number');
            }
            if (data.hasOwnProperty('day_period')) {
                obj['day_period'] = ApiClient.convertToType(data['day_period'], 'Number');
            }
            if (data.hasOwnProperty('interval_period')) {
                obj['interval_period'] = ApiClient.convertToType(data['interval_period'], 'String');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'Number');
            }
            if (data.hasOwnProperty('recipe_type')) {
                obj['recipe_type'] = ApiClient.convertToType(data['recipe_type'], 'String');
            }
            if (data.hasOwnProperty('atc_code')) {
                obj['atc_code'] = ApiClient.convertToType(data['atc_code'], 'String');
            }
            if (data.hasOwnProperty('atc_name')) {
                obj['atc_name'] = ApiClient.convertToType(data['atc_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Medicine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Medicine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Medicine.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ingredient_name'] && !(typeof data['ingredient_name'] === 'string' || data['ingredient_name'] instanceof String)) {
            throw new Error("Expected the field `ingredient_name` to be a primitive type in the JSON string but got " + data['ingredient_name']);
        }
        // ensure the json data is a string
        if (data['interval_period'] && !(typeof data['interval_period'] === 'string' || data['interval_period'] instanceof String)) {
            throw new Error("Expected the field `interval_period` to be a primitive type in the JSON string but got " + data['interval_period']);
        }
        // ensure the json data is a string
        if (data['recipe_type'] && !(typeof data['recipe_type'] === 'string' || data['recipe_type'] instanceof String)) {
            throw new Error("Expected the field `recipe_type` to be a primitive type in the JSON string but got " + data['recipe_type']);
        }
        // ensure the json data is a string
        if (data['atc_code'] && !(typeof data['atc_code'] === 'string' || data['atc_code'] instanceof String)) {
            throw new Error("Expected the field `atc_code` to be a primitive type in the JSON string but got " + data['atc_code']);
        }
        // ensure the json data is a string
        if (data['atc_name'] && !(typeof data['atc_name'] === 'string' || data['atc_name'] instanceof String)) {
            throw new Error("Expected the field `atc_name` to be a primitive type in the JSON string but got " + data['atc_name']);
        }

        return true;
    }


}

Medicine.RequiredProperties = ["id", "barcode", "name", "ingredient_name", "use_period", "use_with", "use_piece", "day_period", "interval_period", "is_active", "category_id", "recipe_type", "atc_code", "atc_name"];

/**
 * @member {Number} id
 */
Medicine.prototype['id'] = undefined;

/**
 * @member {String} barcode
 */
Medicine.prototype['barcode'] = undefined;

/**
 * @member {String} name
 */
Medicine.prototype['name'] = undefined;

/**
 * @member {String} ingredient_name
 */
Medicine.prototype['ingredient_name'] = undefined;

/**
 * @member {Number} use_period
 */
Medicine.prototype['use_period'] = undefined;

/**
 * @member {Number} use_with
 */
Medicine.prototype['use_with'] = undefined;

/**
 * @member {Number} use_piece
 */
Medicine.prototype['use_piece'] = undefined;

/**
 * @member {Number} day_period
 */
Medicine.prototype['day_period'] = undefined;

/**
 * @member {String} interval_period
 */
Medicine.prototype['interval_period'] = undefined;

/**
 * @member {Boolean} is_active
 */
Medicine.prototype['is_active'] = undefined;

/**
 * @member {Number} category_id
 */
Medicine.prototype['category_id'] = undefined;

/**
 * @member {String} recipe_type
 */
Medicine.prototype['recipe_type'] = undefined;

/**
 * @member {String} atc_code
 */
Medicine.prototype['atc_code'] = undefined;

/**
 * @member {String} atc_name
 */
Medicine.prototype['atc_name'] = undefined;






export default Medicine;

