/**
 * Kolay Asistan Medicine API
 * Kolay Asistan medicine application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: v1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Ticket model module.
 * @module model/Ticket
 * @version v1
 */
class Ticket {
    /**
     * Constructs a new <code>Ticket</code>.
     * @alias module:model/Ticket
     * @param medicineid {Number} 
     * @param barcode {String} 
     * @param name {String} 
     * @param periodeKey {Number} 
     * @param periodeValue {Number} 
     * @param periodeFrequence {Number} 
     * @param descriptionTr {String} 
     * @param descriptionEn {String} 
     * @param descriptionRu {String} 
     * @param descriptionAr {String} 
     * @param category {String} 
     * @param version {String} 
     * @param status {Number} 
     * @param from {String} 
     * @param imageUrl {String} 
     */
    constructor(medicineid, barcode, name, periodeKey, periodeValue, periodeFrequence, descriptionTr, descriptionEn, descriptionRu, descriptionAr, category, version, status, from, imageUrl) { 
        
        Ticket.initialize(this, medicineid, barcode, name, periodeKey, periodeValue, periodeFrequence, descriptionTr, descriptionEn, descriptionRu, descriptionAr, category, version, status, from, imageUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, medicineid, barcode, name, periodeKey, periodeValue, periodeFrequence, descriptionTr, descriptionEn, descriptionRu, descriptionAr, category, version, status, from, imageUrl) { 
        obj['medicineid'] = medicineid;
        obj['barcode'] = barcode;
        obj['name'] = name;
        obj['periodeKey'] = periodeKey;
        obj['periodeValue'] = periodeValue;
        obj['periodeFrequence'] = periodeFrequence;
        obj['description_tr'] = descriptionTr;
        obj['description_en'] = descriptionEn;
        obj['description_ru'] = descriptionRu;
        obj['description_ar'] = descriptionAr;
        obj['category'] = category;
        obj['version'] = version;
        obj['status'] = status;
        obj['from'] = from;
        obj['imageUrl'] = imageUrl;
    }

    /**
     * Constructs a <code>Ticket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ticket} obj Optional instance to populate.
     * @return {module:model/Ticket} The populated <code>Ticket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ticket();

            if (data.hasOwnProperty('medicineid')) {
                obj['medicineid'] = ApiClient.convertToType(data['medicineid'], 'Number');
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('periodeKey')) {
                obj['periodeKey'] = ApiClient.convertToType(data['periodeKey'], 'Number');
            }
            if (data.hasOwnProperty('periodeValue')) {
                obj['periodeValue'] = ApiClient.convertToType(data['periodeValue'], 'Number');
            }
            if (data.hasOwnProperty('periodeFrequence')) {
                obj['periodeFrequence'] = ApiClient.convertToType(data['periodeFrequence'], 'Number');
            }
            if (data.hasOwnProperty('description_tr')) {
                obj['description_tr'] = ApiClient.convertToType(data['description_tr'], 'String');
            }
            if (data.hasOwnProperty('description_en')) {
                obj['description_en'] = ApiClient.convertToType(data['description_en'], 'String');
            }
            if (data.hasOwnProperty('description_ru')) {
                obj['description_ru'] = ApiClient.convertToType(data['description_ru'], 'String');
            }
            if (data.hasOwnProperty('description_ar')) {
                obj['description_ar'] = ApiClient.convertToType(data['description_ar'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ticket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ticket</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Ticket.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description_tr'] && !(typeof data['description_tr'] === 'string' || data['description_tr'] instanceof String)) {
            throw new Error("Expected the field `description_tr` to be a primitive type in the JSON string but got " + data['description_tr']);
        }
        // ensure the json data is a string
        if (data['description_en'] && !(typeof data['description_en'] === 'string' || data['description_en'] instanceof String)) {
            throw new Error("Expected the field `description_en` to be a primitive type in the JSON string but got " + data['description_en']);
        }
        // ensure the json data is a string
        if (data['description_ru'] && !(typeof data['description_ru'] === 'string' || data['description_ru'] instanceof String)) {
            throw new Error("Expected the field `description_ru` to be a primitive type in the JSON string but got " + data['description_ru']);
        }
        // ensure the json data is a string
        if (data['description_ar'] && !(typeof data['description_ar'] === 'string' || data['description_ar'] instanceof String)) {
            throw new Error("Expected the field `description_ar` to be a primitive type in the JSON string but got " + data['description_ar']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }

        return true;
    }


}

Ticket.RequiredProperties = ["medicineid", "barcode", "name", "periodeKey", "periodeValue", "periodeFrequence", "description_tr", "description_en", "description_ru", "description_ar", "category", "version", "status", "from", "imageUrl"];

/**
 * @member {Number} medicineid
 */
Ticket.prototype['medicineid'] = undefined;

/**
 * @member {String} barcode
 */
Ticket.prototype['barcode'] = undefined;

/**
 * @member {String} name
 */
Ticket.prototype['name'] = undefined;

/**
 * @member {Number} periodeKey
 */
Ticket.prototype['periodeKey'] = undefined;

/**
 * @member {Number} periodeValue
 */
Ticket.prototype['periodeValue'] = undefined;

/**
 * @member {Number} periodeFrequence
 */
Ticket.prototype['periodeFrequence'] = undefined;

/**
 * @member {String} description_tr
 */
Ticket.prototype['description_tr'] = undefined;

/**
 * @member {String} description_en
 */
Ticket.prototype['description_en'] = undefined;

/**
 * @member {String} description_ru
 */
Ticket.prototype['description_ru'] = undefined;

/**
 * @member {String} description_ar
 */
Ticket.prototype['description_ar'] = undefined;

/**
 * @member {String} category
 */
Ticket.prototype['category'] = undefined;

/**
 * @member {String} version
 */
Ticket.prototype['version'] = undefined;

/**
 * @member {Number} status
 */
Ticket.prototype['status'] = undefined;

/**
 * @member {String} from
 */
Ticket.prototype['from'] = undefined;

/**
 * @member {String} imageUrl
 */
Ticket.prototype['imageUrl'] = undefined;






export default Ticket;

